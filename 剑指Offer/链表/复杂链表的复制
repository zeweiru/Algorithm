# -*- coding:utf-8 -*-
# class RandomListNode:
#     def __init__(self, x):
#         self.label = x
#         self.next = None
#         self.random = None
class Solution:
    # 返回 RandomListNode
    def Clone(self, pHead):
        # write code here
        if pHead is None:
            return None
        # build a new list
        pCur = pHead
        while pCur:
            pNxt = pCur.next
            nn = RandomListNode(pCur.label)
            pCur.next = nn
            nn.next = pNxt
            pCur = pNxt
        # update random pointers
        pCur = pHead
        while pCur:
            pRan = pCur.random
            nn = pCur.next
            pNxt = nn.next
            if pRan:
                nn.random = pRan.next
            else:
                nn.random = None
            pCur = pNxt
        # find the result
        res = pHead.next
        # seperate lists
        pCur = pHead
        while pCur:
            nn = pCur.next
            pCur.next = nn.next
            pNxt = pCur.next
            if pNxt:
                nn.next = pNxt.next
            else:
                nn.next = None
            pCur = pNxt
        
        return res
